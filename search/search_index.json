{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to my documentaci\u00f3n Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to my documentaci\u00f3n"},{"location":"#welcome-to-my-documentacion","text":"","title":"Welcome to my documentaci\u00f3n"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"automatic_filters/","text":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u0434\u0430\u0442\u0435 \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0440\u0435\u0439\u0441\u043e\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f views.py \u041f\u043e\u0438\u0441\u043a \u041f\u043e\u0438\u0441\u043a \u0441\u0430\u043c\u043e\u043b\u0435\u0442\u0430 \u043f\u043e \u0435\u0433\u043e \u0442\u0438\u043f\u0443 views.py \u041f\u043e\u0438\u0441\u043a \u043f\u043e \u043f\u043e\u043b\u044f\u043c \u0438\u0437 \u0441\u0432\u044f\u0437\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u041f\u043e\u0438\u0441\u043a \u0440\u0435\u0439\u0441\u0430 \u043f\u043e \u0442\u0440\u0430\u043d\u0437\u0438\u0442\u0443 views.py \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443 views.py","title":"2.1.2 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b"},{"location":"automatic_filters/#_1","text":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0440\u0435\u0439\u0441\u043e\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f views.py","title":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u0434\u0430\u0442\u0435"},{"location":"automatic_filters/#_2","text":"\u041f\u043e\u0438\u0441\u043a \u0441\u0430\u043c\u043e\u043b\u0435\u0442\u0430 \u043f\u043e \u0435\u0433\u043e \u0442\u0438\u043f\u0443 views.py","title":"\u041f\u043e\u0438\u0441\u043a"},{"location":"automatic_filters/#_3","text":"\u041f\u043e\u0438\u0441\u043a \u0440\u0435\u0439\u0441\u0430 \u043f\u043e \u0442\u0440\u0430\u043d\u0437\u0438\u0442\u0443 views.py","title":"\u041f\u043e\u0438\u0441\u043a \u043f\u043e \u043f\u043e\u043b\u044f\u043c \u0438\u0437 \u0441\u0432\u044f\u0437\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b"},{"location":"automatic_filters/#_4","text":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443 views.py","title":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439"},{"location":"chapter_1/","text":"Dockerfile \u0434\u043b\u044f backend \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 FROM python:3.7.4 WORKDIR /airport2 COPY . /airport2 RUN pip install -r requirements.txt Dockerfile \u0434\u043b\u044f frontend \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 FROM node:lts-alpine WORKDIR /airport_front COPY package*.json ./ RUN npm install COPY . . RUN npm run build \u041e\u0440\u043a\u0435\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e docker-compose version: '3' services: postgres: image: postgres:14.2 volumes: - ./airport2/data/db:/var/lib/postgresql/data/ environment: - POSTGRES_NAME=postgres - POSTGRES_USER=postgres - POSTGRES_PASSWORD=postgres ports: - \"5432:5432\" backend: container_name: back build: ./airport2 command: bash -c \"python manage.py runserver --insecure 0.0.0.0:8000\"; ports: - \"8000:8000\" depends_on: - postgres restart: always volumes: - ./airport2:/airport2 frontend: container_name: front build: context: ./airport_front command: npm run serve volumes: - ./airport_front:/airport_front ports: - \"8080:8080\" depends_on: - backend","title":"\u0413\u043b\u0430\u0432\u0430 1"},{"location":"chapter_2/","text":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0444\u0438\u043b\u044c\u0442\u0440 \u0441 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u043e\u0439 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430 views.py class EmployeeAgeFilter(django_filters.FilterSet): min_age = django_filters.NumberFilter(field_name = 'age', lookup_expr = 'gte') max_age = django_filters.NumberFilter(field_name = 'age', lookup_expr = 'lte') class Meta: model = Employee fields = ['min_age', 'max_age'] \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044e \u0438 \u043d\u043e\u043c\u0435\u0440\u0443 \u044d\u043a\u0438\u043f\u0430\u0436\u0430 views.py class EmployeeListView(generics.ListAPIView): queryset = Employee.objects.all() serializer_class = EmployeeSerializer pagination_class = CustomPagination filterset_class = EmployeeAgeFilter def get_queryset(self): queryset = Employee.objects.all() education = self.request.query_params.get('education', None) in_crew = self.request.query_params.get('in_crew', None) if (education is not None) and (in_crew is not None): queryset = queryset.filter(education=education, in_crew=in_crew) return queryset \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044e \u0441\u0430\u043c\u043e\u043b\u0435\u0442\u0430 \u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438, \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0442\u0438\u043f\u0443 \u0441\u0430\u043c\u043e\u043b\u0435\u0442\u0430 views.py class AirplaneListView(generics.ListAPIView): queryset = Airplane.objects.all() serializer_class = AirplaneSerializer def get_queryset(self): queryset = Airplane.objects.all() under_maintenance = self.request.query_params.get('under_maintenance', None) airline = self.request.query_params.get('airline', None) if (under_maintenance is not None) and (airline is not None): queryset = queryset.filter(under_maintenance=under_maintenance, airline=airline) elif under_maintenance is not None: queryset = queryset.filter(under_maintenance=under_maintenance) elif airline is not None: queryset = queryset.filter(airline=airline) return queryset filter_backends = [filters.SearchFilter] search_fields = ['type'] \u041f\u043e\u0438\u0441\u043a \u0440\u0435\u0439\u0441\u0430 \u043f\u043e \u0442\u0440\u0430\u043d\u0437\u0438\u0442\u0443 (\u0438\u0437 \u0441\u0432\u044f\u0437\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b) views.py class ScheduleListView(generics.ListAPIView): queryset = FlightAsScheduled.objects.all() serializer_class = ScheduleSerializer filter_backends = [filters.SearchFilter] search_fields = ['transit__destination'] \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0440\u0435\u0439\u0441\u043e\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f, \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0435\u0439\u0441\u043e\u0432 \u043f\u043e \u044d\u043a\u0438\u043f\u0430\u0436\u0443 \u043d\u0430 \u0431\u043e\u0440\u0442\u0443 views.py class FlightListView(generics.ListAPIView): queryset = Flight.objects.all() serializer_class = FlightSerializer def get_queryset(self): queryset = Flight.objects.all() crew = self.request.query_params.get('crew', None) if crew is not None: queryset = queryset.filter(crew=crew) return queryset filter_backends = [filters.OrderingFilter] departure_date = django_filters.DateFilter(field_name='departure_date', lookup_expr='exact') \u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f settings.py REST_FRAMEWORK = { 'DEFAULT_AUTHENTICATION_CLASSES': ( 'rest_framework.authentication.TokenAuthentication', ), 'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'], 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination', 'PAGE_SIZE': 4 } \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u0430\u044f \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f views.py class CustomPagination(pagination.PageNumberPagination): def get_paginated_response(self, data): return Response({ 'links': { 'next': self.get_next_link(), 'previous': self.get_previous_link() }, 'count': self.page.paginator.count, 'page_number': self.page.number, 'num_pages': self.page.paginator.num_pages, 'results': data, }) \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432 \u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0444\u043e\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0438 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430 models.py class Photo(models.Model): employee = models.ForeignKey('Employee', on_delete=models.CASCADE, null=True) name = models.CharField(max_length=100, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435', null=True) size = models.IntegerField(verbose_name='\u0420\u0430\u0437\u043c\u0435\u0440', null=True) file = models.FileField(validators=[validate_file], upload_to='media/') def __str__(self): return self.name def save(self, *args, **kwargs): self.name = self.file.name self.size = self.file.size super(Photo, self).save(*args, **kwargs) \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 views.py class MultiplePhotoCreateView(generics.CreateAPIView): queryset = Photo.objects.all() serializer_class = EmployeePhotoSerializer def post(self, request, *args, **kwargs): files = request.FILES.getlist('file') for file in files: file = Photo(name=file.name, size=file.size, file=file) file.save() return Response() \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0439\u043b\u0430 validators.py def validate_file(file): MAX_MB = 10 limit = MAX_MB * 1024 * 1024 if file.size > limit: raise ValidationError(f'\u0420\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 {MAX_MB} MB.') file_extensions = ['image/jpeg', 'image/jpg', 'image/png'] content_type = magic.from_buffer(file.read(), mime=True) if content_type not in file_extensions: raise ValidationError(f'\u0424\u0430\u0439\u043b\u044b \u0441 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435\u043c {content_type} \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f.') \u0421\u0438\u0433\u043d\u0430\u043b\u044b \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043b\u043e\u0433\u0438\u043a\u0443 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 signals.py @receiver(post_save, sender=Employee) def create(sender, instance, created, **kwargs): if created: print(f'\u041a\u0440\u0430\u0441\u043e\u0442\u043a\u0430 {instance.full_name} \u0431\u044b\u043b\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432\\n') \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0432 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 signals.py @receiver(pre_save, sender=Employee) def update(sender, instance, **kwargs): try: prev_instance = Employee.objects.get(id=instance.id) instance.old_age = prev_instance.age print(f'\u041a\u0440\u0430\u0441\u043e\u0442\u043a\u0430 {instance.full_name} \u0441\u0442\u0430\u043b\u0430 \u043d\u0430 \u0433\u043e\u0434 \u0431\u043b\u0438\u0436\u0435 \u043a \u043f\u0435\u043d\u0441\u0438\u0438 \\n' f'\u041a\u0440\u0430\u0441\u043e\u0442\u043a\u0435 \u0431\u044b\u043b\u043e {instance.old_age}\\n' f'\u041a\u0440\u0430\u0441\u043e\u0442\u043a\u0435 \u0441\u0442\u0430\u043b\u043e {instance.age}\\n') except ObjectDoesNotExist: pass \u041f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0432 \u043b\u043e\u0433 signals.py @receiver(pre_delete, sender=Employee) def delete(sender, instance, **kwargs): with open('\u043b\u043e\u0433\u0438.txt', 'a') as f: f.write(f'\u041a\u0440\u0430\u0441\u043e\u0442\u043a\u0430 {instance.full_name} \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u0441 \u043d\u0430\u043c\u0438\\n')","title":"\u0413\u043b\u0430\u0432\u0430 2"},{"location":"chapter_2/#_1","text":"\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0444\u0438\u043b\u044c\u0442\u0440 \u0441 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u043e\u0439 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430 views.py class EmployeeAgeFilter(django_filters.FilterSet): min_age = django_filters.NumberFilter(field_name = 'age', lookup_expr = 'gte') max_age = django_filters.NumberFilter(field_name = 'age', lookup_expr = 'lte') class Meta: model = Employee fields = ['min_age', 'max_age'] \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044e \u0438 \u043d\u043e\u043c\u0435\u0440\u0443 \u044d\u043a\u0438\u043f\u0430\u0436\u0430 views.py class EmployeeListView(generics.ListAPIView): queryset = Employee.objects.all() serializer_class = EmployeeSerializer pagination_class = CustomPagination filterset_class = EmployeeAgeFilter def get_queryset(self): queryset = Employee.objects.all() education = self.request.query_params.get('education', None) in_crew = self.request.query_params.get('in_crew', None) if (education is not None) and (in_crew is not None): queryset = queryset.filter(education=education, in_crew=in_crew) return queryset \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044e \u0441\u0430\u043c\u043e\u043b\u0435\u0442\u0430 \u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438, \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0442\u0438\u043f\u0443 \u0441\u0430\u043c\u043e\u043b\u0435\u0442\u0430 views.py class AirplaneListView(generics.ListAPIView): queryset = Airplane.objects.all() serializer_class = AirplaneSerializer def get_queryset(self): queryset = Airplane.objects.all() under_maintenance = self.request.query_params.get('under_maintenance', None) airline = self.request.query_params.get('airline', None) if (under_maintenance is not None) and (airline is not None): queryset = queryset.filter(under_maintenance=under_maintenance, airline=airline) elif under_maintenance is not None: queryset = queryset.filter(under_maintenance=under_maintenance) elif airline is not None: queryset = queryset.filter(airline=airline) return queryset filter_backends = [filters.SearchFilter] search_fields = ['type'] \u041f\u043e\u0438\u0441\u043a \u0440\u0435\u0439\u0441\u0430 \u043f\u043e \u0442\u0440\u0430\u043d\u0437\u0438\u0442\u0443 (\u0438\u0437 \u0441\u0432\u044f\u0437\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b) views.py class ScheduleListView(generics.ListAPIView): queryset = FlightAsScheduled.objects.all() serializer_class = ScheduleSerializer filter_backends = [filters.SearchFilter] search_fields = ['transit__destination'] \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0440\u0435\u0439\u0441\u043e\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f, \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0435\u0439\u0441\u043e\u0432 \u043f\u043e \u044d\u043a\u0438\u043f\u0430\u0436\u0443 \u043d\u0430 \u0431\u043e\u0440\u0442\u0443 views.py class FlightListView(generics.ListAPIView): queryset = Flight.objects.all() serializer_class = FlightSerializer def get_queryset(self): queryset = Flight.objects.all() crew = self.request.query_params.get('crew', None) if crew is not None: queryset = queryset.filter(crew=crew) return queryset filter_backends = [filters.OrderingFilter] departure_date = django_filters.DateFilter(field_name='departure_date', lookup_expr='exact')","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f"},{"location":"chapter_2/#_2","text":"\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f settings.py REST_FRAMEWORK = { 'DEFAULT_AUTHENTICATION_CLASSES': ( 'rest_framework.authentication.TokenAuthentication', ), 'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'], 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination', 'PAGE_SIZE': 4 } \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u0430\u044f \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f views.py class CustomPagination(pagination.PageNumberPagination): def get_paginated_response(self, data): return Response({ 'links': { 'next': self.get_next_link(), 'previous': self.get_previous_link() }, 'count': self.page.paginator.count, 'page_number': self.page.number, 'num_pages': self.page.paginator.num_pages, 'results': data, })","title":"\u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f"},{"location":"chapter_2/#_3","text":"\u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0444\u043e\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0438 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430 models.py class Photo(models.Model): employee = models.ForeignKey('Employee', on_delete=models.CASCADE, null=True) name = models.CharField(max_length=100, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435', null=True) size = models.IntegerField(verbose_name='\u0420\u0430\u0437\u043c\u0435\u0440', null=True) file = models.FileField(validators=[validate_file], upload_to='media/') def __str__(self): return self.name def save(self, *args, **kwargs): self.name = self.file.name self.size = self.file.size super(Photo, self).save(*args, **kwargs) \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 views.py class MultiplePhotoCreateView(generics.CreateAPIView): queryset = Photo.objects.all() serializer_class = EmployeePhotoSerializer def post(self, request, *args, **kwargs): files = request.FILES.getlist('file') for file in files: file = Photo(name=file.name, size=file.size, file=file) file.save() return Response() \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0439\u043b\u0430 validators.py def validate_file(file): MAX_MB = 10 limit = MAX_MB * 1024 * 1024 if file.size > limit: raise ValidationError(f'\u0420\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 {MAX_MB} MB.') file_extensions = ['image/jpeg', 'image/jpg', 'image/png'] content_type = magic.from_buffer(file.read(), mime=True) if content_type not in file_extensions: raise ValidationError(f'\u0424\u0430\u0439\u043b\u044b \u0441 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435\u043c {content_type} \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f.')","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432"},{"location":"chapter_2/#_4","text":"\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043b\u043e\u0433\u0438\u043a\u0443 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 signals.py @receiver(post_save, sender=Employee) def create(sender, instance, created, **kwargs): if created: print(f'\u041a\u0440\u0430\u0441\u043e\u0442\u043a\u0430 {instance.full_name} \u0431\u044b\u043b\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432\\n') \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0432 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 signals.py @receiver(pre_save, sender=Employee) def update(sender, instance, **kwargs): try: prev_instance = Employee.objects.get(id=instance.id) instance.old_age = prev_instance.age print(f'\u041a\u0440\u0430\u0441\u043e\u0442\u043a\u0430 {instance.full_name} \u0441\u0442\u0430\u043b\u0430 \u043d\u0430 \u0433\u043e\u0434 \u0431\u043b\u0438\u0436\u0435 \u043a \u043f\u0435\u043d\u0441\u0438\u0438 \\n' f'\u041a\u0440\u0430\u0441\u043e\u0442\u043a\u0435 \u0431\u044b\u043b\u043e {instance.old_age}\\n' f'\u041a\u0440\u0430\u0441\u043e\u0442\u043a\u0435 \u0441\u0442\u0430\u043b\u043e {instance.age}\\n') except ObjectDoesNotExist: pass \u041f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0432 \u043b\u043e\u0433 signals.py @receiver(pre_delete, sender=Employee) def delete(sender, instance, **kwargs): with open('\u043b\u043e\u0433\u0438.txt', 'a') as f: f.write(f'\u041a\u0440\u0430\u0441\u043e\u0442\u043a\u0430 {instance.full_name} \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u0441 \u043d\u0430\u043c\u0438\\n')","title":"\u0421\u0438\u0433\u043d\u0430\u043b\u044b"},{"location":"chapter_3/","text":"\u0422\u0435\u0441\u0442\u044b \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c class EmployeeModelTest(TestCase): @classmethod def setUpTestData(cls): Employee.objects.create(username='masha', passport='4508377639', full_name='\u041f\u0435\u0442\u0440\u044b\u043a\u0438\u043d\u0430 \u041c\u0430\u0440\u0438\u044f \u0412\u043b\u0430\u0434\u0438\u043c\u0438\u0440\u043e\u0432\u043d\u0430', age='41', education='\u0421\u041f\u041e', experience='13', in_crew='1') def test_education_field(self): employee = Employee.objects.get(id=1) education = employee._meta.get_field('education') self.assertTrue(isinstance(education, CharField)) class ScheduleModelTest(TestCase): @classmethod def setUpTestData(cls): cls.transit = Transit(destination = '\u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433') cls.schedule = FlightAsScheduled(number = '13', distance = 100, departure = '\u0423\u0444\u0430', arrival = '\u041c\u043e\u0441\u043a\u0432\u0430', transit = cls.transit, completed = 12) def test_name(self): flight = self.schedule name_field = flight._meta.get_field('number').verbose_name self.assertEquals(name_field, '\u041d\u043e\u043c\u0435\u0440 \u0440\u0435\u0439\u0441\u0430') class AirlaneModelTest(TestCase): @classmethod def setUpTestData(cls): Airplane.objects.create(tail_number = 12, type = '\u041f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0441\u043a\u0438\u0439', seats=120, velocity = 240, airline='pobeda', under_maintenance = 'no') def test_field_max_length(self): name = Airplane.objects.get(id=1) max_length = name._meta.get_field('airline').max_length self.assertEquals(max_length, 30) \u0422\u0435\u0441\u0442\u044b \u043d\u0430 GET \u0437\u0430\u043f\u0440\u043e\u0441 class TransitGetTest(TestCase): @classmethod def setUpTestData(cls): Transit.objects.create(destination='\u0423\u0444\u0430') def test_get_transit(self): url = reverse('airport_admin:transit') data = {\"count\": 1, \"next\": None, \"previous\": None, \"results\": [{\"id\": 2, \"destination\": \"\u0423\u0444\u0430\"}]} response = self.client.get(url, format ='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) class FlightAsScheduledGetTest(TestCase): @classmethod def setUpTestData(cls): Transit.objects.create(destination = '\u0423\u0444\u0430') FlightAsScheduled.objects.create(number = '1', distance = 120, departure = '\u0421\u0430\u043b\u0430\u0432\u0430\u0442', arrival = '\u041c\u043e\u0441\u043a\u0432\u0430', transit = Transit.objects.get(id=1), completed = 10) def test_get_transit(self): url = reverse('airport_admin:schedule') data = {\"count\": 1, \"next\": None, \"previous\": None, \"results\": [{\"number\": 1, \"distance\": 120, \"departure\": \"\u0421\u0430\u043b\u0430\u0432\u0430\u0442\", \"arrival\": \"\u041c\u043e\u0441\u043a\u0432\u0430\", \"completed\": 10, \"transit\": 1}]} response = self.client.get(url, format ='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) class EmployeeGetTest(TestCase): @classmethod def setUpTestData(cls): Employee.objects.create(username='cherepan', passport='4508377123', full_name='\u0422\u0430\u0440\u0435\u043b\u043a\u0438\u043d \u0427\u0435\u0440\u0435\u043f\u0430\u043d \u0410\u043d\u0434\u0440\u0435\u0435\u0432\u0438\u0447', age='32', education='\u0412\u041e', experience='10', in_crew='2') def test_get_transit(self): url = reverse('airport_admin:employee') data = {\"links\": {\"next\": None, \"previous\": None}, \"count\": 1, \"page_number\": 1, \"num_pages\": 1, \"results\": [{\"username\": \"cherepan\", \"passport\": \"4508377123\", \"full_name\": \"\u0422\u0430\u0440\u0435\u043b\u043a\u0438\u043d \u0427\u0435\u0440\u0435\u043f\u0430\u043d \u0410\u043d\u0434\u0440\u0435\u0435\u0432\u0438\u0447\", \"age\": 32, \"education\": \"\u0412\u041e\", \"experience\": 10, \"in_crew\": 2}]} response = self.client.get(url, format ='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) \u0422\u0435\u0441\u0442\u044b \u043d\u0430 POST \u0437\u0430\u043f\u0440\u043e\u0441 class TransitPostTest(TestCase): def test_create_transit(self): url = reverse('airport_admin:transit_create') data = {'id': 1, 'destination': \"\u0423\u0444\u0430\"} response = self.client.post(url, data, format ='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data) class AirplanePostTest(TestCase): def test_create_airplane(self): url = reverse('airport_admin:airplane_create') data = {\"id\": 1, \"tail_number\": \"134\", \"type\": \"\u041f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0441\u043a\u0438\u0439\", \"seats\": 76, \"velocity\": 240, \"airline\": \"pobeda\", \"under_maintenance\": \"no\"} response = self.client.post(url, data, format ='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data) class EmployeePostTest(TestCase): def test_create_employee(self): url = reverse('airport_admin:employee_create') data = {\"username\": \"cambio_dolor\", \"passport\": \"1234123453\", \"full_name\": \"\u041c\u0443\u0436\u0438\u043a\u043e\u0432 \u0414\u043e\u043b\u043e\u0440\u0435\u0441 \u0424\u0435\u043b\u0438\u043a\u0441\u043e\u0432\u043d\u0430\", \"age\": 20, \"education\": \"\u0421\u041f\u041e\", \"experience\": 10, \"in_crew\": 2} response = self.client.post(url, data, format ='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data) \u0422\u0435\u0441\u0442\u044b \u043d\u0430 PATCH \u0437\u0430\u043f\u0440\u043e\u0441 class EmployeePatchTest(TestCase): @classmethod def setUpTestData(cls): Employee.objects.create(username = \"cambio_dolor\", passport = \"1234123453\", full_name = \"\u041c\u0443\u0436\u0438\u043a\u043e\u0432 \u0414\u043e\u043b\u043e\u0440\u0435\u0441 \u0424\u0435\u043b\u0438\u043a\u0441\u043e\u0432\u043d\u0430\", age = 20, education = \"\u0421\u041f\u041e\", experience = 10, in_crew = 2) def tearDown(self): Employee.objects.filter(id=1).delete() def test_create_schedule(self): url = reverse('airport_admin:employee_modify', args=[1]) data = {\"username\": \"cambio_dolor\", \"passport\": \"1234123453\", \"full_name\": \"\u041c\u0443\u0436\u0438\u043a\u043e\u0432 \u0414\u043e\u043b\u043e\u0440\u0435\u0441 \u0424\u0435\u043b\u0438\u043a\u0441\u043e\u0432\u043d\u0430\", \"age\": 20, \"education\": \"\u0412\u041e\", \"experience\": 10, \"in_crew\": 2} response = self.client.patch(url, json.dumps({'education': '\u0412\u041e'}), content_type='application/json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.data, data) class TransitPatchTest(TestCase): @classmethod def setUpTestData(cls): Transit.objects.create(id = 1, destination = '\u0423\u0444\u0430') def tearDown(self): Transit.objects.filter(id=1).delete() def test_create_transit(self): url = reverse('airport_admin:transit_modify', args=[1]) data = {\"id\": 1, \"destination\": \"\u0421\u0430\u043b\u0430\u0432\u0430\u0442\"} response = self.client.patch(url, json.dumps({\"destination\": \"\u0421\u0430\u043b\u0430\u0432\u0430\u0442\"}), content_type='application/json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.data, data) class SchedulePatchTest(TestCase): @classmethod def setUpTestData(cls): Transit.objects.create(id = 1, destination = '\u0423\u0444\u0430') FlightAsScheduled.objects.create(number = '1', distance = 120, departure = '\u0421\u0430\u043b\u0430\u0432\u0430\u0442', arrival = '\u041c\u043e\u0441\u043a\u0432\u0430', transit = Transit.objects.get(id=1), completed = 10) def tearDown(self): Transit.objects.filter(id=1).delete() FlightAsScheduled.objects.filter(number=1).delete() def test_create_schedule(self): url = reverse('airport_admin:schedule_modify', args=[1]) data = {\"number\": 1, \"distance\": 240, \"departure\": \"\u0421\u0430\u043b\u0430\u0432\u0430\u0442\", \"arrival\": \"\u041d\u043e\u0432\u043e\u0441\u0438\u0431\u0438\u0440\u0441\u043a\", \"completed\": 10, \"transit\": 1} response = self.client.patch(url, json.dumps({\"distance\": 240, \"arrival\": \"\u041d\u043e\u0432\u043e\u0441\u0438\u0431\u0438\u0440\u0441\u043a\"}), content_type='application/json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.data, data)","title":"\u0413\u043b\u0430\u0432\u0430 3"},{"location":"chapter_3/#_1","text":"class EmployeeModelTest(TestCase): @classmethod def setUpTestData(cls): Employee.objects.create(username='masha', passport='4508377639', full_name='\u041f\u0435\u0442\u0440\u044b\u043a\u0438\u043d\u0430 \u041c\u0430\u0440\u0438\u044f \u0412\u043b\u0430\u0434\u0438\u043c\u0438\u0440\u043e\u0432\u043d\u0430', age='41', education='\u0421\u041f\u041e', experience='13', in_crew='1') def test_education_field(self): employee = Employee.objects.get(id=1) education = employee._meta.get_field('education') self.assertTrue(isinstance(education, CharField)) class ScheduleModelTest(TestCase): @classmethod def setUpTestData(cls): cls.transit = Transit(destination = '\u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433') cls.schedule = FlightAsScheduled(number = '13', distance = 100, departure = '\u0423\u0444\u0430', arrival = '\u041c\u043e\u0441\u043a\u0432\u0430', transit = cls.transit, completed = 12) def test_name(self): flight = self.schedule name_field = flight._meta.get_field('number').verbose_name self.assertEquals(name_field, '\u041d\u043e\u043c\u0435\u0440 \u0440\u0435\u0439\u0441\u0430') class AirlaneModelTest(TestCase): @classmethod def setUpTestData(cls): Airplane.objects.create(tail_number = 12, type = '\u041f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0441\u043a\u0438\u0439', seats=120, velocity = 240, airline='pobeda', under_maintenance = 'no') def test_field_max_length(self): name = Airplane.objects.get(id=1) max_length = name._meta.get_field('airline').max_length self.assertEquals(max_length, 30)","title":"\u0422\u0435\u0441\u0442\u044b \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c"},{"location":"chapter_3/#get","text":"class TransitGetTest(TestCase): @classmethod def setUpTestData(cls): Transit.objects.create(destination='\u0423\u0444\u0430') def test_get_transit(self): url = reverse('airport_admin:transit') data = {\"count\": 1, \"next\": None, \"previous\": None, \"results\": [{\"id\": 2, \"destination\": \"\u0423\u0444\u0430\"}]} response = self.client.get(url, format ='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) class FlightAsScheduledGetTest(TestCase): @classmethod def setUpTestData(cls): Transit.objects.create(destination = '\u0423\u0444\u0430') FlightAsScheduled.objects.create(number = '1', distance = 120, departure = '\u0421\u0430\u043b\u0430\u0432\u0430\u0442', arrival = '\u041c\u043e\u0441\u043a\u0432\u0430', transit = Transit.objects.get(id=1), completed = 10) def test_get_transit(self): url = reverse('airport_admin:schedule') data = {\"count\": 1, \"next\": None, \"previous\": None, \"results\": [{\"number\": 1, \"distance\": 120, \"departure\": \"\u0421\u0430\u043b\u0430\u0432\u0430\u0442\", \"arrival\": \"\u041c\u043e\u0441\u043a\u0432\u0430\", \"completed\": 10, \"transit\": 1}]} response = self.client.get(url, format ='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) class EmployeeGetTest(TestCase): @classmethod def setUpTestData(cls): Employee.objects.create(username='cherepan', passport='4508377123', full_name='\u0422\u0430\u0440\u0435\u043b\u043a\u0438\u043d \u0427\u0435\u0440\u0435\u043f\u0430\u043d \u0410\u043d\u0434\u0440\u0435\u0435\u0432\u0438\u0447', age='32', education='\u0412\u041e', experience='10', in_crew='2') def test_get_transit(self): url = reverse('airport_admin:employee') data = {\"links\": {\"next\": None, \"previous\": None}, \"count\": 1, \"page_number\": 1, \"num_pages\": 1, \"results\": [{\"username\": \"cherepan\", \"passport\": \"4508377123\", \"full_name\": \"\u0422\u0430\u0440\u0435\u043b\u043a\u0438\u043d \u0427\u0435\u0440\u0435\u043f\u0430\u043d \u0410\u043d\u0434\u0440\u0435\u0435\u0432\u0438\u0447\", \"age\": 32, \"education\": \"\u0412\u041e\", \"experience\": 10, \"in_crew\": 2}]} response = self.client.get(url, format ='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data)","title":"\u0422\u0435\u0441\u0442\u044b \u043d\u0430 GET \u0437\u0430\u043f\u0440\u043e\u0441"},{"location":"chapter_3/#post","text":"class TransitPostTest(TestCase): def test_create_transit(self): url = reverse('airport_admin:transit_create') data = {'id': 1, 'destination': \"\u0423\u0444\u0430\"} response = self.client.post(url, data, format ='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data) class AirplanePostTest(TestCase): def test_create_airplane(self): url = reverse('airport_admin:airplane_create') data = {\"id\": 1, \"tail_number\": \"134\", \"type\": \"\u041f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0441\u043a\u0438\u0439\", \"seats\": 76, \"velocity\": 240, \"airline\": \"pobeda\", \"under_maintenance\": \"no\"} response = self.client.post(url, data, format ='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data) class EmployeePostTest(TestCase): def test_create_employee(self): url = reverse('airport_admin:employee_create') data = {\"username\": \"cambio_dolor\", \"passport\": \"1234123453\", \"full_name\": \"\u041c\u0443\u0436\u0438\u043a\u043e\u0432 \u0414\u043e\u043b\u043e\u0440\u0435\u0441 \u0424\u0435\u043b\u0438\u043a\u0441\u043e\u0432\u043d\u0430\", \"age\": 20, \"education\": \"\u0421\u041f\u041e\", \"experience\": 10, \"in_crew\": 2} response = self.client.post(url, data, format ='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data)","title":"\u0422\u0435\u0441\u0442\u044b \u043d\u0430 POST \u0437\u0430\u043f\u0440\u043e\u0441"},{"location":"chapter_3/#patch","text":"class EmployeePatchTest(TestCase): @classmethod def setUpTestData(cls): Employee.objects.create(username = \"cambio_dolor\", passport = \"1234123453\", full_name = \"\u041c\u0443\u0436\u0438\u043a\u043e\u0432 \u0414\u043e\u043b\u043e\u0440\u0435\u0441 \u0424\u0435\u043b\u0438\u043a\u0441\u043e\u0432\u043d\u0430\", age = 20, education = \"\u0421\u041f\u041e\", experience = 10, in_crew = 2) def tearDown(self): Employee.objects.filter(id=1).delete() def test_create_schedule(self): url = reverse('airport_admin:employee_modify', args=[1]) data = {\"username\": \"cambio_dolor\", \"passport\": \"1234123453\", \"full_name\": \"\u041c\u0443\u0436\u0438\u043a\u043e\u0432 \u0414\u043e\u043b\u043e\u0440\u0435\u0441 \u0424\u0435\u043b\u0438\u043a\u0441\u043e\u0432\u043d\u0430\", \"age\": 20, \"education\": \"\u0412\u041e\", \"experience\": 10, \"in_crew\": 2} response = self.client.patch(url, json.dumps({'education': '\u0412\u041e'}), content_type='application/json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.data, data) class TransitPatchTest(TestCase): @classmethod def setUpTestData(cls): Transit.objects.create(id = 1, destination = '\u0423\u0444\u0430') def tearDown(self): Transit.objects.filter(id=1).delete() def test_create_transit(self): url = reverse('airport_admin:transit_modify', args=[1]) data = {\"id\": 1, \"destination\": \"\u0421\u0430\u043b\u0430\u0432\u0430\u0442\"} response = self.client.patch(url, json.dumps({\"destination\": \"\u0421\u0430\u043b\u0430\u0432\u0430\u0442\"}), content_type='application/json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.data, data) class SchedulePatchTest(TestCase): @classmethod def setUpTestData(cls): Transit.objects.create(id = 1, destination = '\u0423\u0444\u0430') FlightAsScheduled.objects.create(number = '1', distance = 120, departure = '\u0421\u0430\u043b\u0430\u0432\u0430\u0442', arrival = '\u041c\u043e\u0441\u043a\u0432\u0430', transit = Transit.objects.get(id=1), completed = 10) def tearDown(self): Transit.objects.filter(id=1).delete() FlightAsScheduled.objects.filter(number=1).delete() def test_create_schedule(self): url = reverse('airport_admin:schedule_modify', args=[1]) data = {\"number\": 1, \"distance\": 240, \"departure\": \"\u0421\u0430\u043b\u0430\u0432\u0430\u0442\", \"arrival\": \"\u041d\u043e\u0432\u043e\u0441\u0438\u0431\u0438\u0440\u0441\u043a\", \"completed\": 10, \"transit\": 1} response = self.client.patch(url, json.dumps({\"distance\": 240, \"arrival\": \"\u041d\u043e\u0432\u043e\u0441\u0438\u0431\u0438\u0440\u0441\u043a\"}), content_type='application/json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.data, data)","title":"\u0422\u0435\u0441\u0442\u044b \u043d\u0430 PATCH \u0437\u0430\u043f\u0440\u043e\u0441"},{"location":"chapter_4/","text":"\u0411\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u044b \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u0438\u0437 \u0432\u0442\u043e\u0440\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439. \u0412 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u0434\u0430\u0442\u0430\u043c \u0432\u044b\u043b\u0435\u0442\u0430 \u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f \u041f\u043e\u0438\u0441\u043a \u043f\u043e \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u041f\u043e\u0438\u0441\u043a \u043f\u043e \u0441\u0432\u044f\u0437\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441 \u0447\u0435\u043a\u0431\u043e\u043a\u0441\u0430\u043c\u0438 \u0424\u0438\u043b\u044c\u0442\u0440 \u043d\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0412\u0445\u043e\u0434 \u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u0441\u0430\u043c\u043e\u043b\u0435\u0442\u0430\u0445 \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u0440\u0435\u0439\u0441\u043e\u0432 \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u044b\u0445 \u0440\u0435\u0439\u0441\u043e\u0432 \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u043f\u0443\u043d\u043a\u0442\u043e\u0432 \u043f\u0435\u0440\u0435\u0441\u0430\u0434\u043a\u0438 \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0435\u0439 \u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 (\u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435) \u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 (\u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435) \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u0435\u0433\u043e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f","title":"\u0413\u043b\u0430\u0432\u0430 4"},{"location":"chapter_4/#_1","text":"","title":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u0434\u0430\u0442\u0430\u043c \u0432\u044b\u043b\u0435\u0442\u0430"},{"location":"chapter_4/#_2","text":"","title":"\u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f"},{"location":"chapter_4/#_3","text":"","title":"\u041f\u043e\u0438\u0441\u043a \u043f\u043e \u0442\u0430\u0431\u043b\u0438\u0446\u0435"},{"location":"chapter_4/#_4","text":"","title":"\u041f\u043e\u0438\u0441\u043a \u043f\u043e \u0441\u0432\u044f\u0437\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u0435"},{"location":"chapter_4/#_5","text":"","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441 \u0447\u0435\u043a\u0431\u043e\u043a\u0441\u0430\u043c\u0438"},{"location":"chapter_4/#_6","text":"","title":"\u0424\u0438\u043b\u044c\u0442\u0440 \u043d\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d"},{"location":"chapter_4/#_7","text":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0412\u0445\u043e\u0434 \u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u0441\u0430\u043c\u043e\u043b\u0435\u0442\u0430\u0445 \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u0440\u0435\u0439\u0441\u043e\u0432 \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u044b\u0445 \u0440\u0435\u0439\u0441\u043e\u0432 \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u043f\u0443\u043d\u043a\u0442\u043e\u0432 \u043f\u0435\u0440\u0435\u0441\u0430\u0434\u043a\u0438 \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0435\u0439 \u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 (\u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435) \u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 (\u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435) \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u0435\u0433\u043e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f","title":"\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b"},{"location":"conclusion/","text":"\u0412 \u0445\u043e\u0434\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u043e\u0439 \u043a\u0443\u0440\u0441\u043e\u0432\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u0432\u0441\u0435 \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0446\u0435\u043b\u0438 \u0438 \u0437\u0430\u0434\u0430\u0447\u0438. \u0411\u044b\u043b \u0441\u043e\u0437\u0434\u0430\u043d \u0441\u0435\u0440\u0432\u0438\u0441 \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0445\u0440\u0430\u043d\u0438\u0442 \u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430\u0445 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430, \u0441\u0430\u043c\u043e\u043b\u0435\u0442\u0430\u0445, \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u0440\u0435\u0439\u0441\u043e\u0432, \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u044b\u0445 \u0440\u0435\u0439\u0441\u0430\u0445 \u0438 \u043f\u0443\u043d\u043a\u0442\u0430\u0445 \u043f\u0435\u0440\u0435\u0441\u0430\u0434\u043a\u0438.","title":"\u0412\u044b\u0432\u043e\u0434"},{"location":"custom_pagination/","text":"\u041c\u0435\u0442\u043e\u0434 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0439, \u043a\u0440\u043e\u043c\u0435 \u043e\u0431\u044b\u0447\u043d\u043e\u0433\u043e \u0432\u044b\u0432\u043e\u0434\u0430 \u0432\u0435\u0440\u043d\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438 \u0438 \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b views.py","title":"2.2.2 \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u0430\u044f \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f"},{"location":"custom_pagination/#_1","text":"views.py","title":"\u041c\u0435\u0442\u043e\u0434 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0439, \u043a\u0440\u043e\u043c\u0435 \u043e\u0431\u044b\u0447\u043d\u043e\u0433\u043e \u0432\u044b\u0432\u043e\u0434\u0430 \u0432\u0435\u0440\u043d\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438 \u0438 \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b"},{"location":"db/","text":"create user masha with encrypted password 'masha1'; grant all privileges on database postgres to masha;","title":"Data Base"},{"location":"docker/","text":"Backend Frontend Docker compose docker-compose up","title":"Dockerfile"},{"location":"docker/#backend","text":"","title":"Backend"},{"location":"docker/#frontend","text":"","title":"Frontend"},{"location":"docker/#docker-compose","text":"docker-compose up","title":"Docker compose"},{"location":"files_and_validators/","text":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0444\u0430\u0439\u043b\u0430 \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0444\u0430\u0439\u043b\u043e\u0432, \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u043a\u043b\u044e\u0447\u0430 \u043d\u0430 \u0441\u0432\u044f\u0437\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0438\u043c\u0435\u043d\u0438 \u0438 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0444\u0430\u0439\u043b\u0430 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. models.py views.py \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043d\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430 \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432. views.py validators.py","title":"2.3 \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432"},{"location":"files_and_validators/#_1","text":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0444\u0430\u0439\u043b\u043e\u0432, \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u043a\u043b\u044e\u0447\u0430 \u043d\u0430 \u0441\u0432\u044f\u0437\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0438\u043c\u0435\u043d\u0438 \u0438 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0444\u0430\u0439\u043b\u0430 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. models.py views.py","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0444\u0430\u0439\u043b\u0430"},{"location":"files_and_validators/#_2","text":"\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043d\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430 \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432. views.py validators.py","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432"},{"location":"frontend/","text":"\u0411\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u044b \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u0438\u0437 \u0432\u0442\u043e\u0440\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439. \u0412 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f \u041f\u043e\u0438\u0441\u043a \u043f\u043e \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u041f\u043e\u0438\u0441\u043a \u043f\u043e \u0441\u0432\u044f\u0437\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441 \u0447\u0435\u043a\u0431\u043e\u043a\u0441\u0430\u043c\u0438 \u0424\u0438\u043b\u044c\u0442\u0440 \u043d\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d","title":"4.1. \u0410\u0434\u0430\u043f\u0442\u0430\u0446\u0438\u044f \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 vue.js"},{"location":"frontend/#_1","text":"","title":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430"},{"location":"frontend/#_2","text":"","title":"\u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f"},{"location":"frontend/#_3","text":"","title":"\u041f\u043e\u0438\u0441\u043a \u043f\u043e \u0442\u0430\u0431\u043b\u0438\u0446\u0435"},{"location":"frontend/#_4","text":"","title":"\u041f\u043e\u0438\u0441\u043a \u043f\u043e \u0441\u0432\u044f\u0437\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u0435"},{"location":"frontend/#_5","text":"","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441 \u0447\u0435\u043a\u0431\u043e\u043a\u0441\u0430\u043c\u0438"},{"location":"frontend/#_6","text":"","title":"\u0424\u0438\u043b\u044c\u0442\u0440 \u043d\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d"},{"location":"introduction/","text":"\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b: \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Django REST Framework \u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Vue.js. \u0417\u0430\u0434\u0430\u0447\u0438: \u0412 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0440\u0430\u0431\u043e\u0442\u0430 \u0432\u0441\u0435\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430\u0445 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u044b, \u0442\u0435\u0441\u0442\u044b, \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f \u0412 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f. \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c. \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441 \u0447\u0435\u043a\u0431\u043e\u043a\u0441\u0430\u043c\u0438. \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u043d\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d. \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u043f\u0430\u043d\u0435\u043b\u0438 \u043c\u0438\u043d\u0438\u043c\u0443\u043c 10 \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u0445 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u0430: \u0421\u0435\u0440\u0432\u0438\u0441 \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430. \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0445\u0440\u0430\u043d\u0438\u0442 \u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430\u0445 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430, \u0441\u0430\u043c\u043e\u043b\u0435\u0442\u0430\u0445, \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u0440\u0435\u0439\u0441\u043e\u0432, \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u044b\u0445 \u0440\u0435\u0439\u0441\u0430\u0445 \u0438 \u043f\u0443\u043d\u043a\u0442\u0430\u0445 \u043f\u0435\u0440\u0435\u0441\u0430\u0434\u043a\u0438.","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435"},{"location":"manual_filters/","text":"\u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0435\u0439\u0441\u043e\u0432 \u043f\u043e \u044d\u043a\u0438\u043f\u0430\u0436\u0443 \u043d\u0430 \u0431\u043e\u0440\u0442\u0443 views.py \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 2 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044e \u0438 \u043d\u043e\u043c\u0435\u0440\u0443 \u044d\u043a\u0438\u043f\u0430\u0436\u0430 views.py \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 2 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d \u0438 \u043d\u0435\u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435, \u0435\u0441\u043b\u0438 \u043d\u0435 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044e \u0441\u0430\u043c\u043e\u043b\u0435\u0442\u0430 \u0438 \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 views.py","title":"2.1.1 \u0420\u0443\u0447\u043d\u044b\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b"},{"location":"manual_filters/#url-","text":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0435\u0439\u0441\u043e\u0432 \u043f\u043e \u044d\u043a\u0438\u043f\u0430\u0436\u0443 \u043d\u0430 \u0431\u043e\u0440\u0442\u0443 views.py","title":"\u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435"},{"location":"manual_filters/#2-url-","text":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044e \u0438 \u043d\u043e\u043c\u0435\u0440\u0443 \u044d\u043a\u0438\u043f\u0430\u0436\u0430 views.py","title":"\u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 2 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435"},{"location":"manual_filters/#2-url-_1","text":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044e \u0441\u0430\u043c\u043e\u043b\u0435\u0442\u0430 \u0438 \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 views.py","title":"\u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 2 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d \u0438 \u043d\u0435\u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435, \u0435\u0441\u043b\u0438 \u043d\u0435 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d"},{"location":"memes/","text":"\u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u0432\u0430 \u0433\u0435\u043d\u0434\u0435\u0440\u0430","title":"\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043c\u0435\u043c\u044b"},{"location":"memes/#_1","text":"","title":"\u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u0432\u0430 \u0433\u0435\u043d\u0434\u0435\u0440\u0430"},{"location":"migrations/","text":"python manage.py makemigrations airport_admin python manage.py migrate","title":"Migrations"},{"location":"more_memes/","text":"\u041d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e\u0439 \u043e\u0448\u0438\u0431\u043a\u0438 \u0432 \u0442\u0435\u0441\u0442\u0435 \u0420\u0430\u0437\u043c\u044b\u0448\u043b\u0435\u043d\u0438\u044f \u043e \u0442\u043e\u043c, \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0441\u0442\u0430\u0442\u044c \u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0435\u0440\u043e\u043c","title":"\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043c\u0435\u043c\u044b"},{"location":"pagination/","text":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043b\u044e\u0431\u044b\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 settings.py","title":"2.2.1 \u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f"},{"location":"pagination/#_1","text":"settings.py","title":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043b\u044e\u0431\u044b\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435"},{"location":"signals/","text":"\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043b\u043e\u0433\u0438\u043a\u0443, \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 signals.py \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0432 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 signals.py \u041f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0432 \u043b\u043e\u0433 signals.py","title":"2.4. \u0421\u0438\u0433\u043d\u0430\u043b\u044b"},{"location":"signals/#_1","text":"signals.py","title":"\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043b\u043e\u0433\u0438\u043a\u0443, \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0430"},{"location":"signals/#_2","text":"signals.py","title":"\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0432 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430"},{"location":"signals/#_3","text":"signals.py","title":"\u041f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0432 \u043b\u043e\u0433"},{"location":"test_get/","text":"class TransitGetTest(TestCase): @classmethod def setUpTestData(cls): Transit.objects.create(destination='\u0423\u0444\u0430') def test_get_transit(self): url = reverse('airport_admin:transit') data = {\"count\": 1, \"next\": None, \"previous\": None, \"results\": [{\"id\": 2, \"destination\": \"\u0423\u0444\u0430\"}]} response = self.client.get(url, format ='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) class FlightAsScheduledGetTest(TestCase): @classmethod def setUpTestData(cls): Transit.objects.create(destination = '\u0423\u0444\u0430') FlightAsScheduled.objects.create(number = '1', distance = 120, departure = '\u0421\u0430\u043b\u0430\u0432\u0430\u0442', arrival = '\u041c\u043e\u0441\u043a\u0432\u0430', transit = Transit.objects.get(id=1), completed = 10) def test_get_transit(self): url = reverse('airport_admin:schedule') data = {\"count\": 1, \"next\": None, \"previous\": None, \"results\": [{\"number\": 1, \"distance\": 120, \"departure\": \"\u0421\u0430\u043b\u0430\u0432\u0430\u0442\", \"arrival\": \"\u041c\u043e\u0441\u043a\u0432\u0430\", \"completed\": 10, \"transit\": 1}]} response = self.client.get(url, format ='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) class EmployeeGetTest(TestCase): @classmethod def setUpTestData(cls): Employee.objects.create(username='cherepan', passport='4508377123', full_name='\u0422\u0430\u0440\u0435\u043b\u043a\u0438\u043d \u0427\u0435\u0440\u0435\u043f\u0430\u043d \u0410\u043d\u0434\u0440\u0435\u0435\u0432\u0438\u0447', age='32', education='\u0412\u041e', experience='10', in_crew='2') def test_get_transit(self): url = reverse('airport_admin:employee') data = {\"links\": {\"next\": None, \"previous\": None}, \"count\": 1, \"page_number\": 1, \"num_pages\": 1, \"results\": [{\"username\": \"cherepan\", \"passport\": \"4508377123\", \"full_name\": \"\u0422\u0430\u0440\u0435\u043b\u043a\u0438\u043d \u0427\u0435\u0440\u0435\u043f\u0430\u043d \u0410\u043d\u0434\u0440\u0435\u0435\u0432\u0438\u0447\", \"age\": 32, \"education\": \"\u0412\u041e\", \"experience\": 10, \"in_crew\": 2}]} response = self.client.get(url, format ='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data)","title":"GET \u0437\u0430\u043f\u0440\u043e\u0441"},{"location":"test_models/","text":"class EmployeeModelTest(TestCase): @classmethod def setUpTestData(cls): Employee.objects.create(username='masha', passport='4508377639', full_name='\u041f\u0435\u0442\u0440\u044b\u043a\u0438\u043d\u0430 \u041c\u0430\u0440\u0438\u044f \u0412\u043b\u0430\u0434\u0438\u043c\u0438\u0440\u043e\u0432\u043d\u0430', age='41', education='\u0421\u041f\u041e', experience='13', in_crew='1') def test_education_field(self): employee = Employee.objects.get(id=1) education = employee._meta.get_field('education') self.assertTrue(isinstance(education, CharField)) class ScheduleModelTest(TestCase): @classmethod def setUpTestData(cls): cls.transit = Transit(destination = '\u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433') cls.schedule = FlightAsScheduled(number = '13', distance = 100, departure = '\u0423\u0444\u0430', arrival = '\u041c\u043e\u0441\u043a\u0432\u0430', transit = cls.transit, completed = 12) def test_name(self): flight = self.schedule name_field = flight._meta.get_field('number').verbose_name self.assertEquals(name_field, '\u041d\u043e\u043c\u0435\u0440 \u0440\u0435\u0439\u0441\u0430') class AirlaneModelTest(TestCase): @classmethod def setUpTestData(cls): Airplane.objects.create(tail_number = 12, type = '\u041f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0441\u043a\u0438\u0439', seats=120, velocity = 240, airline='pobeda', under_maintenance = 'no') def test_field_max_length(self): name = Airplane.objects.get(id=1) max_length = name._meta.get_field('airline').max_length self.assertEquals(max_length, 30)","title":"\u041c\u043e\u0434\u0435\u043b\u044c"},{"location":"test_patch/","text":"class EmployeePatchTest(TestCase): @classmethod def setUpTestData(cls): Employee.objects.create(username = \"cambio_dolor\", passport = \"1234123453\", full_name = \"\u041c\u0443\u0436\u0438\u043a\u043e\u0432 \u0414\u043e\u043b\u043e\u0440\u0435\u0441 \u0424\u0435\u043b\u0438\u043a\u0441\u043e\u0432\u043d\u0430\", age = 20, education = \"\u0421\u041f\u041e\", experience = 10, in_crew = 2) def tearDown(self): Employee.objects.filter(id=1).delete() def test_create_schedule(self): url = reverse('airport_admin:employee_modify', args=[1]) data = {\"username\": \"cambio_dolor\", \"passport\": \"1234123453\", \"full_name\": \"\u041c\u0443\u0436\u0438\u043a\u043e\u0432 \u0414\u043e\u043b\u043e\u0440\u0435\u0441 \u0424\u0435\u043b\u0438\u043a\u0441\u043e\u0432\u043d\u0430\", \"age\": 20, \"education\": \"\u0412\u041e\", \"experience\": 10, \"in_crew\": 2} response = self.client.patch(url, json.dumps({'education': '\u0412\u041e'}), content_type='application/json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.data, data) class TransitPatchTest(TestCase): @classmethod def setUpTestData(cls): Transit.objects.create(id = 1, destination = '\u0423\u0444\u0430') def tearDown(self): Transit.objects.filter(id=1).delete() def test_create_transit(self): url = reverse('airport_admin:transit_modify', args=[1]) data = {\"id\": 1, \"destination\": \"\u0421\u0430\u043b\u0430\u0432\u0430\u0442\"} response = self.client.patch(url, json.dumps({\"destination\": \"\u0421\u0430\u043b\u0430\u0432\u0430\u0442\"}), content_type='application/json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.data, data) class SchedulePatchTest(TestCase): @classmethod def setUpTestData(cls): Transit.objects.create(id = 1, destination = '\u0423\u0444\u0430') FlightAsScheduled.objects.create(number = '1', distance = 120, departure = '\u0421\u0430\u043b\u0430\u0432\u0430\u0442', arrival = '\u041c\u043e\u0441\u043a\u0432\u0430', transit = Transit.objects.get(id=1), completed = 10) def tearDown(self): Transit.objects.filter(id=1).delete() FlightAsScheduled.objects.filter(number=1).delete() def test_create_schedule(self): url = reverse('airport_admin:schedule_modify', args=[1]) data = {\"number\": 1, \"distance\": 240, \"departure\": \"\u0421\u0430\u043b\u0430\u0432\u0430\u0442\", \"arrival\": \"\u041d\u043e\u0432\u043e\u0441\u0438\u0431\u0438\u0440\u0441\u043a\", \"completed\": 10, \"transit\": 1} response = self.client.patch(url, json.dumps({\"distance\": 240, \"arrival\": \"\u041d\u043e\u0432\u043e\u0441\u0438\u0431\u0438\u0440\u0441\u043a\"}), content_type='application/json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.data, data)","title":"PATCH \u0437\u0430\u043f\u0440\u043e\u0441"},{"location":"test_post/","text":"class TransitPostTest(TestCase): def test_create_transit(self): url = reverse('airport_admin:transit_create') data = {'id': 1, 'destination': \"\u0423\u0444\u0430\"} response = self.client.post(url, data, format ='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data) class AirplanePostTest(TestCase): def test_create_airplane(self): url = reverse('airport_admin:airplane_create') data = {\"id\": 1, \"tail_number\": \"134\", \"type\": \"\u041f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0441\u043a\u0438\u0439\", \"seats\": 76, \"velocity\": 240, \"airline\": \"pobeda\", \"under_maintenance\": \"no\"} response = self.client.post(url, data, format ='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data) class EmployeePostTest(TestCase): def test_create_employee(self): url = reverse('airport_admin:employee_create') data = {\"username\": \"cambio_dolor\", \"passport\": \"1234123453\", \"full_name\": \"\u041c\u0443\u0436\u0438\u043a\u043e\u0432 \u0414\u043e\u043b\u043e\u0440\u0435\u0441 \u0424\u0435\u043b\u0438\u043a\u0441\u043e\u0432\u043d\u0430\", \"age\": 20, \"education\": \"\u0421\u041f\u041e\", \"experience\": 10, \"in_crew\": 2} response = self.client.post(url, data, format ='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data)","title":"POST \u0437\u0430\u043f\u0440\u043e\u0441"},{"location":"title/","text":"\u041a\u0443\u0440\u0441\u043e\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u00ab\u0421\u0440\u0435\u0434\u0441\u0442\u0432\u0430 \u0432\u0435\u0431-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\u00bb \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b\u0430: \u041f\u043e\u0445\u043e\u0434\u043d\u044f \u041a\u0441\u0435\u043d\u0438\u044f, \u0433\u0440\u0443\u043f\u043f\u0430 \u041a33422 \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043b: \u0413\u043e\u0432\u043e\u0440\u043e\u0432 \u0410.\u0418.","title":"\u0422\u0438\u0442\u0443\u043b\u044c\u043d\u044b\u0439 \u043b\u0438\u0441\u0442"},{"location":"title/#-","text":"\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b\u0430: \u041f\u043e\u0445\u043e\u0434\u043d\u044f \u041a\u0441\u0435\u043d\u0438\u044f, \u0433\u0440\u0443\u043f\u043f\u0430 \u041a33422 \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043b: \u0413\u043e\u0432\u043e\u0440\u043e\u0432 \u0410.\u0418.","title":"\u041a\u0443\u0440\u0441\u043e\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u00ab\u0421\u0440\u0435\u0434\u0441\u0442\u0432\u0430 \u0432\u0435\u0431-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\u00bb"},{"location":"update/","text":"","title":"Update"}]}